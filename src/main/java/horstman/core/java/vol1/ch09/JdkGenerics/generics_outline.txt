JDK 12

raw
    R: List<any>
    W: List<any>

? - any type
    R: List<any>;           Object
    W: List<any>;           nothing

T - specific type
    R: List<T>;             T
    W: List<T>;             T

? extends T (get - producer)
    W: List<T and sub>;     nothing
    R: List<T and above>;   T and above

L extends T
    W: List<T>
    R: List<T and above>

? super T (set - consumer)
    W: List<T and above>;   T and sub
    R: List<any>;           Object

----------------------------

PECS
    Collections
        public static <T> int binarySearch(List<? extends T> list, T key, Comparator<? super T> c)
            T in comparator is same or parent to T in list


javac.util.GraphUtils
    public static <D, N extends TarjanNode<D, N>> List<? extends List<? extends N>> tarjan(Iterable<? extends N> nodes)
        T extends List<T>
            List or sub-type of T or sub-type

Collections.UnmodifiableEntrySet
    Set<? extends Map.Entry<? extends K, ? extends V>>
        Set or sub-type of Map.Entry or sub-type of K or sub-type and V or sub-type

Collections.min
    public static <T extends Object & Comparable<? super T>> T min(Collection<? extends T> coll)
        for efficiency: raw type will be replaced by first bound - Object
            casts to Comparable will be added where necessary


Self-bounding generics
    class SelfBounded<T extends SelfBounded<T>> -> class A extends SelfBounded<A>
        you want 'new A.set(new A())' [pass same class as param]
            for that you want to 'class A extends SelfBounded<A>' [pass type param same as class using it]
    class Enum< E extends Enum<E>>
    interface BaseStream<T, S extends BaseStream<T, S>>
    class TarjanNode<D, N extends TarjanNode<D, N>>

    see also:
        https://www.artima.com/weblogs/viewpost.jsp?thread=136394
        http://www.angelikalanger.com/GenericsFAQ/FAQSections/TypeParameters.html#FAQ106

------------------

how-to
    declaration:
        + variable1
        + variable2

        + class
            + method param of getter/setter
                variable1 -> set to class [Person, Employee, Student, Manager]
                get from class -> variable2

        + field
            + method param of getter/setter
                variable1 -> set to class
                get from class -> variable2

        + static generic method for class
            variable1 -> set to method
            get from method -> variable2

    try above with
        + raw
        + T
        + ?
        + Wildcard Capture (swap, swapHelper)
        + ? extends T
        + L extends T
        + ? super T
        + class Enum< E extends Enum<E>>

EOF
